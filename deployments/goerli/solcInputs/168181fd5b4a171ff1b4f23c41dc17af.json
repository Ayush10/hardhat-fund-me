{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum funding in USD\n\n// SPDX-License-Identifier: MIT\n\n// Pragma\npragma solidity ^0.8.8;\n\n// Imports\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// Error Codes\nerror FundMe__NotOwner();\n\n// Interfaces, Libraries, Contracts\n\n/**\n * @title A contract for crowd funding\n * @author Ayush Ojha\n * @notice This contract is to demo a sample funding contract\n * @dev This implements price feeds as a library\n */\ncontract FundMe {\n    // constant and immutable helsp to bring down gas prices.\n\n    // Type Declarations\n    using PriceConverter for uint256;\n\n    // State Variables!\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // with constant: 21415, without constant:23515\n\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n\n    // Wallets and Smart Contracts can hold native blockchain tokens like Ethereum\n\n    address private immutable i_owner;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    // Modifiers\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        } // Gas efficient way.\n        _; // means doing the rest of the code where this modifier is used. Position of this matters as\n        // it determines what the order of the function will be.\n    }\n\n    // Functions order:\n    //// constructor\n    //// receive\n    //// fallback\n    //// external\n    //// public\n    //// internal\n    //// private\n    //// view/pure\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // // receive\n    // receive() external payable {\n    //     fund();\n    // }\n\n    // // fallback\n    // fallback() external payable {\n    //     fund();\n    // }\n\n    /**\n     * @notice This function funds this contract\n     * @dev This implements price feeds as a library\n     */\n    function fund() public payable {\n        // payable allows a function to send funds\n        // Want to be able to set a minimum fund amount in USD\n        // 1. How do we send ETH to this contract?\n        // require(msg.value >= minimumUSD, \"Didn't send enough.\"); // 1e18 = 1 and 18 0s = 1000000000000000000\n        // msg.value.getConversionRate();\n        // require(getConversionRate(msg.value) >= minimumUSD, \"Didn't send enough.\");\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"You need to spend more ETH!\"\n        );\n        s_addressToAmountFunded[msg.sender] = msg.value;\n        s_funders.push(msg.sender);\n\n        // What is reverting?\n        // undo any action before, and send remaining gas back\n        // reverts are really useful to save gas incase of a computation error because anything before the require\n        // statement will be reverted back\n    }\n\n    // function getPrice() public view returns(uint256) {\n    //     // ABI of the contract and the Address of the contract\n    //     // contract address for Goreli TestNet 0xA39434A63A52E749F02807ae27335515BA4b07F7\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xA39434A63A52E749F02807ae27335515BA4b07F7);\n    //     // (uint roundID, int price, uint startedAt, uint timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\n    //     (,int256 price,,,) = priceFeed.latestRoundData();\n    //     // ETH in terms of USD is returned here.\n    //     // 3000.00000000 There are 8 decimal places associated with this account.\n    //     return uint256(price * 1e10); // 1e10 = 10000000000\n    // }\n\n    // function getConversionRate(uint256 ethAmount) public view returns(uint256) {\n    //     uint256 ethPrice = getPrice();\n    //     uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18; // In Solidity always Multiply and then Divide.\n    //     return ethAmountInUSD;\n    // }\n\n    function Withdraw() public onlyOwner {\n        // require(msg.sender == owner, \"Sender is not owner!\");\n        /* strating index, ending index, step amount */\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n            // addressToAmountFunded[funders[funderIndex]] = 0;\n        }\n\n        // reset the funders array\n        s_funders = new address[](0);\n        // actually withdraw the funds\n        // 3 different ways: transfer, send, call\n\n        // transfer\n        // msg.sender = address\n        // payable(msg.sender) = payable address\n        // payable(msg.sender).transfer(address(this). balance);\n\n        // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\"); // only revert if we add this statement here.\n\n        // call\n        // (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n        // revert(); can be used anywhere in a function to revert a transaction or a function call.\n    }\n\n    // What happens when someone send this contract ETH without calling the fund function?\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        // mappings can't be in memory, sorry!\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        // ABI of the contract and the Address of the contract\n        // contract address for Goreli TestNet 0xA39434A63A52E749F02807ae27335515BA4b07F7\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0xA39434A63A52E749F02807ae27335515BA4b07F7\n        // );\n        // (uint roundID, int price, uint startedAt, uint timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in terms of USD is returned here.\n        // 3000.00000000 There are 8 decimal places associated with this account.\n        return uint256(price * 1e10); // 1e10 = 10000000000\n    }\n\n    function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0xA39434A63A52E749F02807ae27335515BA4b07F7\n        );\n        return priceFeed.version();\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18; // In Solidity always Multiply and then Divide.\n        return ethAmountInUSD;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}