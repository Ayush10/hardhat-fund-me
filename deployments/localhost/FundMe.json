{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x860c822d13b28d4c828dceee365d865073ca2469b76203854ddee0b1a6faa7cd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1025608",
    "logsBloom": "0x
    "blockHash": "0x5c697e2167a51577132f3d96be74f24a77b7070c38187ff6d7b0e5294d4ff229",
    "transactionHash": "0x860c822d13b28d4c828dceee365d865073ca2469b76203854ddee0b1a6faa7cd",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1025608",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "94eecfde2d4e648a61dcee14a3760735",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ayush Ojha\",\"details\":\"This implements price feeds as a library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as a library\"},\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding in USD\\n// Wallets and Smart Contracts can hold native blockchain tokens like Ethereum\\n\\n// SPDX-License-Identifier: MIT\\n\\n// Pragma\\npragma solidity ^0.8.10;\\n\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Ayush Ojha\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as a library\\n */\\ncontract FundMe {\\n    // constant and immutable helsp to bring down gas prices.\\n\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables!\\n    uint256 public constant MINIMUM_USD = 50 * 10**18; // with constant: 21415, without constant:23515\\n    address private immutable i_owner;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        } // Gas efficient way.\\n        _; // means doing the rest of the code where this modifier is used. Position of this matters as\\n        // it determines what the order of the function will be.\\n    }\\n\\n    // Functions order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view/pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    // // receive\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // // fallback\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as a library\\n     */\\n    function fund() public payable {\\n        // payable allows a function to send funds\\n        // Want to be able to set a minimum fund amount in USD\\n        // 1. How do we send ETH to this contract?\\n        // require(msg.value >= minimumUSD, \\\"Didn't send enough.\\\"); // 1e18 = 1 and 18 0s = 1000000000000000000\\n        // msg.value.getConversionRate();\\n        // require(getConversionRate(msg.value) >= minimumUSD, \\\"Didn't send enough.\\\");\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to send more ETH!\\\"\\n        );\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n        s_funders.push(msg.sender);\\n\\n        // What is reverting?\\n        // undo any action before, and send remaining gas back\\n        // reverts are really useful to save gas incase of a computation error because anything before the require\\n        // statement will be reverted back\\n    }\\n\\n    // function getPrice() public view returns(uint256) {\\n    //     // ABI of the contract and the Address of the contract\\n    //     // contract address for Goreli TestNet 0xA39434A63A52E749F02807ae27335515BA4b07F7\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xA39434A63A52E749F02807ae27335515BA4b07F7);\\n    //     // (uint roundID, int price, uint startedAt, uint timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\\n    //     (,int256 price,,,) = priceFeed.latestRoundData();\\n    //     // ETH in terms of USD is returned here.\\n    //     // 3000.00000000 There are 8 decimal places associated with this account.\\n    //     return uint256(price * 1e10); // 1e10 = 10000000000\\n    // }\\n\\n    // function getConversionRate(uint256 ethAmount) public view returns(uint256) {\\n    //     uint256 ethPrice = getPrice();\\n    //     uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18; // In Solidity always Multiply and then Divide.\\n    //     return ethAmountInUSD;\\n    // }\\n\\n    function Withdraw() public onlyOwner {\\n        // require(msg.sender == owner, \\\"Sender is not owner!\\\");\\n        /* strating index, ending index, step amount */\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n            // addressToAmountFunded[funders[funderIndex]] = 0;\\n        }\\n\\n        // reset the funders array\\n        s_funders = new address[](0);\\n        // actually withdraw the funds\\n        // 3 different ways: transfer, send, call\\n\\n        // transfer\\n        // msg.sender = address\\n        // payable(msg.sender) = payable address\\n        // payable(msg.sender).transfer(address(this). balance);\\n\\n        // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\"); // only revert if we add this statement here.\\n\\n        // call\\n        // (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success);\\n        // revert(); can be used anywhere in a function to revert a transaction or a function call.\\n    }\\n\\n    // What happens when someone send this contract ETH without calling the fund function?\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x4f936d574c5530e0167f808a2b4dd065540d6db63cb06ffe1c2b3759c1c420a9\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // ABI of the contract and the Address of the contract\\n        // contract address for Goreli TestNet 0xA39434A63A52E749F02807ae27335515BA4b07F7\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xA39434A63A52E749F02807ae27335515BA4b07F7\\n        // );\\n        // (uint roundID, int price, uint startedAt, uint timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH in terms of USD is returned here.\\n        // 3000.00000000 There are 8 decimal places associated with this account.\\n        return uint256(price * 10**10); // 1e10 = 10000000000\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0xA39434A63A52E749F02807ae27335515BA4b07F7\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 10**18; // In Solidity always Multiply and then Divide.\\n        return ethAmountInUSD;\\n    }\\n}\\n\",\"keccak256\":\"0xdd4d138db09ac07ff6dcd18a2fd225144b2527fc6e9610b86983505d2b3d7853\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012ad380380620012ad83398181016040528101906200003791906200011d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161112d62000180600039600081816102be015281816104d70152818161064f0152610845015261112d6000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c1461019f57610086565b80630343fb251461008b5780630d8e6e2c146100c857806357ea89b6146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610afa565b6101dc565b6040516100bf9190610b40565b60405180910390f35b3480156100d457600080fd5b506100dd610224565b6040516100ea9190610b40565b60405180910390f35b3480156100ff57600080fd5b506101086102bc565b005b34801561011657600080fd5b5061011f6104c6565b60405161012c9190610b40565b60405180910390f35b34801561014157600080fd5b5061014a6104d3565b6040516101579190610b6a565b60405180910390f35b34801561016c57600080fd5b506101756104fb565b6040516101829190610be4565b60405180910390f35b610193610525565b005b61019d61064d565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190610c2b565b6108db565b6040516101d39190610b6a565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b79190610c6d565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610341576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103ec5760006001828154811061036757610366610c9a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103e490610cf8565b915050610344565b50600067ffffffffffffffff81111561040857610407610d41565b5b6040519080825280602002602001820160405280156104365781602001602082028036833780820191505090505b506001908051906020019061044c9291906109f0565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047390610da1565b60006040518083038185875af1925050503d80600081146104b0576040519150601f19603f3d011682016040523d82523d6000602084013e6104b5565b606091505b50509050806104c357600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610564600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092390919063ffffffff16565b10156105a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059c90610e13565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561075657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161070c575b5050505050905060005b81518110156107e057600082828151811061077e5761077d610c9a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107d890610cf8565b915050610760565b50600067ffffffffffffffff8111156107fc576107fb610d41565b5b60405190808252806020026020018201604052801561082a5781602001602082028036833780820191505090505b50600190805190602001906108409291906109f0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161088790610da1565b60006040518083038185875af1925050503d80600081146108c4576040519150601f19603f3d011682016040523d82523d6000602084013e6108c9565b606091505b50509050806108d757600080fd5b5050565b6000600182815481106108f1576108f0610c9a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061092f8361095f565b90506000670de0b6b3a764000085836109489190610e33565b6109529190610ebc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190610f65565b5050509150506402540be400816109e89190610fe0565b915050919050565b828054828255906000526020600020908101928215610a69579160200282015b82811115610a685782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a10565b5b509050610a769190610a7a565b5090565b5b80821115610a93576000816000905550600101610a7b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac782610a9c565b9050919050565b610ad781610abc565b8114610ae257600080fd5b50565b600081359050610af481610ace565b92915050565b600060208284031215610b1057610b0f610a97565b5b6000610b1e84828501610ae5565b91505092915050565b6000819050919050565b610b3a81610b27565b82525050565b6000602082019050610b556000830184610b31565b92915050565b610b6481610abc565b82525050565b6000602082019050610b7f6000830184610b5b565b92915050565b6000819050919050565b6000610baa610ba5610ba084610a9c565b610b85565b610a9c565b9050919050565b6000610bbc82610b8f565b9050919050565b6000610bce82610bb1565b9050919050565b610bde81610bc3565b82525050565b6000602082019050610bf96000830184610bd5565b92915050565b610c0881610b27565b8114610c1357600080fd5b50565b600081359050610c2581610bff565b92915050565b600060208284031215610c4157610c40610a97565b5b6000610c4f84828501610c16565b91505092915050565b600081519050610c6781610bff565b92915050565b600060208284031215610c8357610c82610a97565b5b6000610c9184828501610c58565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0382610b27565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3657610d35610cc9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d8b600083610d70565b9150610d9682610d7b565b600082019050919050565b6000610dac82610d7e565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f2073656e64206d6f72652045544821000000000000600082015250565b6000610dfd601a83610db6565b9150610e0882610dc7565b602082019050919050565b60006020820190508181036000830152610e2c81610df0565b9050919050565b6000610e3e82610b27565b9150610e4983610b27565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e8257610e81610cc9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec782610b27565b9150610ed283610b27565b925082610ee257610ee1610e8d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0c81610eed565b8114610f1757600080fd5b50565b600081519050610f2981610f03565b92915050565b6000819050919050565b610f4281610f2f565b8114610f4d57600080fd5b50565b600081519050610f5f81610f39565b92915050565b600080600080600060a08688031215610f8157610f80610a97565b5b6000610f8f88828901610f1a565b9550506020610fa088828901610f50565b9450506040610fb188828901610c58565b9350506060610fc288828901610c58565b9250506080610fd388828901610f1a565b9150509295509295909350565b6000610feb82610f2f565b9150610ff683610f2f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103557611034610cc9565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561107257611071610cc9565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110af576110ae610cc9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ec576110eb610cc9565b5b82820290509291505056fea2646970667358221220899ec9806faa2317aedd64f706ad05dd81e7ad482ebe5301896d0477cf11160564736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101355780639e87a5cd14610160578063b60d42881461018b578063be2693f014610195578063d7b4750c1461019f57610086565b80630343fb251461008b5780630d8e6e2c146100c857806357ea89b6146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610afa565b6101dc565b6040516100bf9190610b40565b60405180910390f35b3480156100d457600080fd5b506100dd610224565b6040516100ea9190610b40565b60405180910390f35b3480156100ff57600080fd5b506101086102bc565b005b34801561011657600080fd5b5061011f6104c6565b60405161012c9190610b40565b60405180910390f35b34801561014157600080fd5b5061014a6104d3565b6040516101579190610b6a565b60405180910390f35b34801561016c57600080fd5b506101756104fb565b6040516101829190610be4565b60405180910390f35b610193610525565b005b61019d61064d565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190610c2b565b6108db565b6040516101d39190610b6a565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b79190610c6d565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610341576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103ec5760006001828154811061036757610366610c9a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103e490610cf8565b915050610344565b50600067ffffffffffffffff81111561040857610407610d41565b5b6040519080825280602002602001820160405280156104365781602001602082028036833780820191505090505b506001908051906020019061044c9291906109f0565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161047390610da1565b60006040518083038185875af1925050503d80600081146104b0576040519150601f19603f3d011682016040523d82523d6000602084013e6104b5565b606091505b50509050806104c357600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610564600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461092390919063ffffffff16565b10156105a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059c90610e13565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561075657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161070c575b5050505050905060005b81518110156107e057600082828151811061077e5761077d610c9a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107d890610cf8565b915050610760565b50600067ffffffffffffffff8111156107fc576107fb610d41565b5b60405190808252806020026020018201604052801561082a5781602001602082028036833780820191505090505b50600190805190602001906108409291906109f0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161088790610da1565b60006040518083038185875af1925050503d80600081146108c4576040519150601f19603f3d011682016040523d82523d6000602084013e6108c9565b606091505b50509050806108d757600080fd5b5050565b6000600182815481106108f1576108f0610c9a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061092f8361095f565b90506000670de0b6b3a764000085836109489190610e33565b6109529190610ebc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190610f65565b5050509150506402540be400816109e89190610fe0565b915050919050565b828054828255906000526020600020908101928215610a69579160200282015b82811115610a685782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a10565b5b509050610a769190610a7a565b5090565b5b80821115610a93576000816000905550600101610a7b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac782610a9c565b9050919050565b610ad781610abc565b8114610ae257600080fd5b50565b600081359050610af481610ace565b92915050565b600060208284031215610b1057610b0f610a97565b5b6000610b1e84828501610ae5565b91505092915050565b6000819050919050565b610b3a81610b27565b82525050565b6000602082019050610b556000830184610b31565b92915050565b610b6481610abc565b82525050565b6000602082019050610b7f6000830184610b5b565b92915050565b6000819050919050565b6000610baa610ba5610ba084610a9c565b610b85565b610a9c565b9050919050565b6000610bbc82610b8f565b9050919050565b6000610bce82610bb1565b9050919050565b610bde81610bc3565b82525050565b6000602082019050610bf96000830184610bd5565b92915050565b610c0881610b27565b8114610c1357600080fd5b50565b600081359050610c2581610bff565b92915050565b600060208284031215610c4157610c40610a97565b5b6000610c4f84828501610c16565b91505092915050565b600081519050610c6781610bff565b92915050565b600060208284031215610c8357610c82610a97565b5b6000610c9184828501610c58565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0382610b27565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3657610d35610cc9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d8b600083610d70565b9150610d9682610d7b565b600082019050919050565b6000610dac82610d7e565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f2073656e64206d6f72652045544821000000000000600082015250565b6000610dfd601a83610db6565b9150610e0882610dc7565b602082019050919050565b60006020820190508181036000830152610e2c81610df0565b9050919050565b6000610e3e82610b27565b9150610e4983610b27565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e8257610e81610cc9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec782610b27565b9150610ed283610b27565b925082610ee257610ee1610e8d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0c81610eed565b8114610f1757600080fd5b50565b600081519050610f2981610f03565b92915050565b6000819050919050565b610f4281610f2f565b8114610f4d57600080fd5b50565b600081519050610f5f81610f39565b92915050565b600080600080600060a08688031215610f8157610f80610a97565b5b6000610f8f88828901610f1a565b9550506020610fa088828901610f50565b9450506040610fb188828901610c58565b9350506060610fc288828901610c58565b9250506080610fd388828901610f1a565b9150509295509295909350565b6000610feb82610f2f565b9150610ff683610f2f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103557611034610cc9565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561107257611071610cc9565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110af576110ae610cc9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ec576110eb610cc9565b5b82820290509291505056fea2646970667358221220899ec9806faa2317aedd64f706ad05dd81e7ad482ebe5301896d0477cf11160564736f6c634300080a0033",
  "devdoc": {
    "author": "Ayush Ojha",
    "details": "This implements price feeds as a library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as a library"
      },
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 331,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 334,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 337,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}